/*
 * This file is part of the COMP_hack Library (libcomp).
 *
 * Copyright (C) 2012-2018 COMP_hack Team <compomega@tutanota.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @mainpage libcomp - The COMP_hack library for just about everything.
 * libcomp provides code used by multiple applications in the
 * COMP_hack suite. Features include: encryption and decryption of both client
 * data and the network protocol, parsing and writing client data files,
 * packet handling, compression, string conversion, and scripting.
 *
 * @section enc_and_dec Encryption and Decryption
 * Include the following header to use the encryption and decryption methods:
 * @code
 * #include <Crypto.h>
 * @endcode
 * Client files can be read using @ref Decrypt::decryptFile and written using
 * @ref Decrypt::encryptFile. These methods will handle any encryption the
 * files may be using. If you do not wish to specify the language you may
 * call the language methods directly: @ref Decrypt::decryptFileJP,
 * @ref Decrypt::decryptFileUS, @ref Decrypt::encryptFileJP, and
 * @ref Decrypt::encryptFileUS.
 *
 * The network protocol uses Blowfish in electronic codeblock (ECB) mode. The
 * server and client must first agree upon a key using the Diffie-Hellman key
 * exchange. The private key used in this exchange can be generated with the
 * @ref Decrypt::generateRandom method. Calculating the public key and shared
 * secret can be done using the @ref Decrypt::genDiffieHellman method. The
 * key exchange works as follows:
 * - The server uses a pre-determined base and prime number. These values can
 * remain the same for the life of the code.
 * - The server generates a private key using @ref Decrypt::generateRandom.
 * - The server generates a public key using @ref Decrypt::genDiffieHellman
 * like so:
 * @code
 * QString serverPublic = genDiffieHellman(base, prime, serverPrivate);
 * @endcode
 * - The server sends the base, prime, and public key to the client. Note that
 * if the base and prime never change, the client can assume their values
 * without the need to wait for the server. This doesn't work for the server
 * emulator but it is used for the more compact protocol used in other
 * applications in the suite.
 * - The client generates a private key using @ref Decrypt::generateRandom.
 * - The client generates a public key using @ref Decrypt::genDiffieHellman
 * like so:
 * @code
 * QString clientPublic = genDiffieHellman(base, prime, clientPrivate);
 * @endcode
 * - The client sends the public key to the server.
 * - Both the client and server may calculate the shared secret using
 * @ref Decrypt::genDiffieHellman like so:
 * @code
 * QString sharedSecret = genDiffieHellman(providedPublic, prime,
 *     calculatedPrivate);
 * @endcode
 * - The first 8 bytes of the shared secret are used for a Blowfish key.
 *
 * The server should only have it's own generated private key and vice versa.
 * Sending a private key would allow anyone to calculate the shared secret.
 * For more information see the @ref Decrypt documentation, the network code,
 * and the guide.
 */
